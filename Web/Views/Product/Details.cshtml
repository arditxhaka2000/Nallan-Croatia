@model OA_Web.Models.Index4ApiProd
@{
	ViewData["Title"] = "Product Page";
	var externalBase = "https://nallan.eu/products";
	var internalBase = "~/Products"; // Internal path in your application
	var sharedRes = (Dictionary<string, string>)ViewData["Shared"];
	string currentLanguage = ViewContext.RouteData.Values["lang"].ToString();
	ViewBag.ProductId = Model.Product.ProductCode;
	ViewBag.Title = "Product Details";
}
<style>
	.bootstrap-touchspin-down {
		/* Your styles here */
		background-color: white !important;
		color: black !important;
		border:none;
	}
	.bootstrap-touchspin-up {
		/* Your styles here */
		background-color: white !important;
		color: black !important;
		border: none;
	}

	.btn-group label.btn {
		border-radius: 25px !important;
		min-width: 45px;
		height: 40px;
		margin: 0 3px 3px 0;
		font-weight: 600;
		font-size: 13px;
	}

	.size-selector {
		display: flex;
		flex-wrap: wrap;
		gap: 10px;
		justify-content: center;
	}

	.size-radio {
		display: none;
	}

	.size-label {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		width: 50px;
		height: 50px;
		border: 2px solid #dee2e6;
		border-radius: 50%;
		background: white;
		cursor: pointer;
		font-weight: 600;
		font-size: 14px;
		transition: all 0.3s ease;
		color: #495057;
		position: relative;
		overflow: hidden;
	}

		.size-label:hover {
			border-color: #00B3B7;
			color: #00B3B7;
			transform: scale(1.05);
		}

	.size-radio:checked + .size-label {
		background: #00B3B7;
		border-color: #00B3B7;
		color: white;
	}

	/* Disabled state */
	.size-label.disabled {
		background: #f8f9fa;
		border-color: #e9ecef;
		color: #6c757d;
		cursor: not-allowed;
		opacity: 0.7;
	}

		.size-label.disabled:hover {
			transform: none;
			border-color: #e9ecef;
			color: #6c757d;
		}

	/* Overlay X styles */
	.unavailable-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		pointer-events: none;
	}

	.cross-line-1,
	.cross-line-2 {
		position: absolute;
		width: 70%;
		height: 2px;
		background-color: #dc3545;
		border-radius: 1px;
	}

	.cross-line-1 {
		transform: rotate(45deg);
	}

	.cross-line-2 {
		transform: rotate(-45deg);
	}

	.custom-toggle-container {
		border-bottom: 1px solid #f5cfcf;
		margin-bottom: 1rem;
	}

	.custom-toggle-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		cursor: pointer;
		padding: 10px 0;
	}

	.toggle-icon {
		display: inline-block;
		transition: transform 0.3s ease;
		background-color: #e0e0e0;
		padding: 5px;
		border-radius: 50%;
		font-size: 12px;
	}

	.custom-toggle-container.open .toggle-icon {
		transform: rotate(180deg);
	}

	.custom-toggle-body {
		display: none;
		padding: 10px 0;
		color: #333;
	}

	.custom-toggle-container.open .custom-toggle-body {
		display: block;
	}

	@@media (max-width: 668px) {
		/* Make the row display as flex column */
		.container-fluid .product-page-main.row {
			display: flex !important;
			flex-direction: column !important;
		}
		/* Target the image column specifically on mobile only */
		.container-fluid .product-page-main > .col-xl-6:first-child {
			order: -1 !important;
			width: 100% !important;
			max-width: 100% !important;
			flex: 0 0 100% !important;
			margin-bottom: 20px !important;
		}
		/* Target the details column specifically on mobile only */
		.container-fluid .product-page-main > .col-xl-6:last-child {
			order: 1 !important;
			width: 100% !important;
			max-width: 100% !important;
			flex: 0 0 100% !important;
		}
		/* Hide thumbnails on mobile */
		.product-thumbnail {
			display: none !important;
		}
		/* Make main image area full width */
		.product-main {
			flex: 0 0 100% !important;
			max-width: 100% !important;
		}
		/* Make the slider horizontal */
		.pro-slide-single {
			display: flex !important;
			overflow-x: auto !important;
			overflow-y: hidden !important;
			scroll-snap-type: x mandatory !important;
			-webkit-overflow-scrolling: touch !important;
		}
			/* Each image slide */
			.pro-slide-single > div {
				flex: 0 0 100% !important;
				scroll-snap-align: start !important;
			}
			/* Image sizing */
			.pro-slide-single img {
				width: 100% !important;
				height: 400px !important;
				object-fit: cover !important;
			}
		/* Container height */
		.product-page-main .row[style*="max-height:800px"] {
			max-height: 600px !important;
		}

		.product-page-main .card {
			border: none !important;
			box-shadow: none !important;
		}

		.product-page-main .card-body {
			padding: 0 !important;
		}
		/* Remove any other borders that might be showing */
		.pro-slide-single {
			border: none !important;
		}

		.product-main {
			border: none !important;
		}

		.col-xl-3.col-sm-4.align-items-center.mb-3.mt-4 {
			flex: none !important;
			width: auto !important;
			max-width: 150px !important;
		}
		/* Remove dark background from fieldset */
		.qty-box.bg-dark {
			background: transparent !important;
		}
		/* Fix the input group */
		.qty-box .input-group.bootstrap-touchspin {
			display: flex !important;
			flex-direction: row !important;
			width: 120px !important;
			border: 1px solid #dee2e6 !important;
			border-radius: 4px !important;
			overflow: hidden !important;
		}
		/* Fix the buttons - override btn-primary */
		.bootstrap-touchspin-down.btn-primary,
		.bootstrap-touchspin-up.btn-primary {
			background: white !important;
			border: none !important;
			color: #333 !important;
			width: 30px !important;
			height: 38px !important;
			padding: 0 !important;
			display: flex !important;
			align-items: center !important;
			justify-content: center !important;
		}

			.bootstrap-touchspin-down.btn-primary:hover,
			.bootstrap-touchspin-up.btn-primary:hover {
				background: #f8f9fa !important;
				color: #333 !important;
			}
		/* Fix the input */
		.qty-box .touchspin.form-control {
			background: white !important;
			border: none !important;
			flex: 1 !important;
			text-align: center !important;
			box-shadow: none !important;
			border-left: 1px solid #dee2e6 !important;
			border-right: 1px solid #dee2e6 !important;
		}

		.page-body {
			margin-top: 0 !important;
			padding-top: 0 !important;
		}

		.container-fluid .page-header {
			margin-bottom: 0 !important;
			padding-bottom: 0 !important;
		}

		.page-header .row.mt-5 {
			margin-top: 0.5rem !important;
			margin-bottom: 0.5rem !important;
		}
	}
</style>

<div class="page-body" style="margin-left:0!important">
	<div class="container-fluid">
		<div class="page-header">
			<div class="row mt-5">
				<div class="col-sm-6">
					<h3>
						@sharedRes.CheckKey("ProductDetails")

					</h3>
				</div>
			</div>
		</div>
	</div>
	<!-- Container-fluid starts-->
	<div class="container-fluid">

		<div class="row product-page-main p-0">
			<div class="col-xl-6 col-md-6 box-col-12 xl-50">
				<div class="card">
					<div class="card-body">
						<div class="row" style="max-height:800px; overflow:hidden">
							<div class="col-xl-3 product-thumbnail">
								<div class="pro-slide-right">
									@if (Model?.Product?.ImageUrls.Count > 0)
									{
										foreach (var imageUrl in Model.Product.ImageUrls)
										{
											<div class="slide-item">
												<img src="@imageUrl" alt="Product Image" class="product-image" />
											</div>
										}
									}
								</div>
							</div>
							<div class="col-xl-9 product-main">
								<div class="pro-slide-single">
									@if (Model?.Product?.ImageUrls.Count > 0)
									{

										foreach (var img in Model?.Product?.ImageUrls)
										{
											<div>
												<img class="img-fluid" src="@Url.Content(img.Replace(externalBase, internalBase))" alt="" />
											</div>
										}
									}
									else if (Model?.Products.First().ImageUrls.Count > 0)
									{
										foreach (var img in Model?.Products.First().ImageUrls)
										{
											<div>
												<img class="img-fluid" src="@Url.Content(img.Replace(externalBase, internalBase))" alt="" />
											</div>
										}
									}
								</div>
							</div>

						</div>
					</div>
				</div>
			</div>

			<div class="col-xl-6 col-md-6 box-col-6 xl-50 proorder-lg-1">
				<div class="card">
					<div class="card-body">
						<div class="row justify-content-spacebetween">
							<div class="col-12">

								<h4>@Model.Product.Title</h4>
								<br />
								<h6>Model: @Model.Product.ProductCode</h6>
								<br />
								<br />

							</div>
						</div>
						<div class="filter-block">
							<ul>
								<li style="display:inline-flex; align-items:center;">
									<h4 class="text-success mb-0">@Model?.Product?.Price &#8364;&nbsp;</h4>

									@if (Model?.Product?.OldPrice > 0 && Model.Product.OldPrice > Model.Product.Price)
									{
										var discount = Math.Round(((Model.Product.OldPrice - Model.Product.Price) / Model.Product.OldPrice) * 100);
										<del class="text-danger ms-2 mb-0">

											<h4 class="mb-0">@Model?.Product?.OldPrice &#8364;</h4>
										</del>
										<br />
										<br />

										<span class="badge bg-danger text-white ms-2">-@discount%</span>
									}
								</li>


								<!-- Quantity Selection -->
								<div class="col-xl-3 col-sm-4 align-items-center mb-3 mt-4">
									<h5>
										@sharedRes.CheckKey("SelectQuantity"):
										<br />

									</h5>
									<fieldset class="qty-box  bg-dark">
										<div class="input-group bootstrap-touchspin" style="border: 1px solid black;">
											<input id="quantity-@Model?.Product?.ProductCode" class="touchspin text-center form-control " type="text" value="1" style="display: block;">
										</div>
									</fieldset>
								</div>
								</li>

								<li>
									<!-- Size Selection -->
									<div class="col-12 d-flex align-items-center mb-5 mt-4">
										<div class="sizes-container">
											<h5>
												@sharedRes.CheckKey("SelectSize"):
											</h5>
											<div class="size-selector" role="group" aria-label="Size options">
												@if (Model?.Product?.Variants?.Count > 0)
												{
													var renderedSizes = new HashSet<string>();
													foreach (var variant in Model.Product.Variants)
													{
														var sizeSpecifications = variant.Specifications.Select(s => new
														{
															Size = s.Value,
															ProductCode = variant.ProductCode
														});
														foreach (var sizeSpec in sizeSpecifications)
														{
															var size = sizeSpec.Size;
															var variantProductCode = sizeSpec.ProductCode;
															if (renderedSizes.Contains(size)) continue;
															renderedSizes.Add(size);
															var inputId = $"size-{Model?.Product?.ProductCode}-{size}";
															var hasStock = variant.StoreStockQuantity > 0;

															<input type="radio"
																   class="size-radio"
																   data-variant-productcode="@variantProductCode"
																   name="sizeOptions-@Model?.Product?.ProductCode"
																   id="@inputId"
																   value="@size"
																   autocomplete="off"
																   @(hasStock ? "" : "disabled") />

															<label class="size-label @(hasStock ? "" : "disabled")" for="@inputId">
																@size
																@if (!hasStock)
																{
																	<div class="unavailable-overlay">
																		<span class="cross-line-1"></span>
																		<span class="cross-line-2"></span>
																	</div>
																}
															</label>
														}
													}
												}
											</div>

										</div>
									</div>

								</li>
								<li>
									<!-- Add to Cart Button -->
									<div class="col-6">
										<a class="btn btn-xl btn-dark add-to-cart-btn py-3 px-4 w-100 d-flex align-items-center justify-content-center gap-2"
										   data-product-id="@Model?.Product?.ProductCode">
											<i class="fa fa-shopping-bag" aria-hidden="true"></i>
											@sharedRes.CheckKey("AddToCart")
										</a>
									</div>


								</li>

							</ul>
							<br />
							<div class="custom-toggle-container">
								<div class="custom-toggle-header" onclick="toggleDetails(this)">
									<strong>PRODUCT DETAILS</strong>
									<span class="toggle-icon">&#9662;</span> <!-- ▼ -->
								</div>
								<div class="custom-toggle-body">
									@Model.Product.Description
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<hr />
		<div class="product-wrapper-grid">
			<div class="row justify-content-center">
				@if (Model.Products.Count() > 0)
				{
					<h1 class="text-center">
						@sharedRes.CheckKey("SimilarProducts")
					</h1>
					@foreach (var productt in Model.Products)
					{
						<div class="col-xl-3 col-sm-6 m-4">
							<div class="card">
								<div class="product-box">
									<div class="product-img">
										<a asp-controller="Product" asp-action="Details" asp-route-productid="@productt.ProductCode">
											@{
												var firstImage = productt?.ImageUrls?.FirstOrDefault();
												var imageSrc = firstImage != null ? firstImage.Replace(externalBase, internalBase) : "~/no-image.png";
											}
											<img class="img-fluid" src="@Url.Content(imageSrc)" style="max-width: 100%; max-height: auto;" alt="">

										</a>
									</div>

									<!-- Modal Trigger -->
									<div class="product-details">
										<div class="row justify-content-spacebetween">
											<div class="col-12">
												<a asp-controller="Product" asp-action="Details" asp-route-productid="@productt.ProductCode">
													<h4>@productt.Title</h4>
												</a>
												<p>@productt.Description</p>
											</div>

										</div>

										<div class="product-price">
											<div class="row justify-content-spacebetween">
												<div class="col-7 pt-2">
													@productt.Price &euro;
													<del>@productt.OldPrice &euro;</del>
												</div>
												<div class="col-5 text-end p-0">
													<!-- Button to trigger the modal for each product -->
													<a class="btn btn-sm p-2" data-bs-toggle="modal" data-bs-target="#productDetailsModal-@productt.ProductCode" style="background-color:#00B3B7"> @sharedRes.CheckKey("AddToCart")</a>
												</div>
											</div>
										</div>
									</div>

									<!-- Modal for each product -->
									<div class="modal fade" id="productDetailsModal-@productt.ProductCode" tabindex="-1" aria-labelledby="productDetailsLabel-@productt.ProductCode" aria-hidden="true">
										<div class="modal-dialog modal-lg modal-dialog-centered">
											<div class="modal-content">
												<div class="modal-header">
													<h6> @sharedRes.CheckKey("Details")</h6>
													<button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
												</div>
												<div class="modal-body">
													<div class="row">


														<!-- Quantity Selection -->
														<div class="col-6 align-items-center mb-3">
															<h5> @sharedRes.CheckKey("SelectQuantity"):</h5>
															<fieldset class="qty-box">
																<div class="input-group bootstrap-touchspin">
																	<input id="quantity-@productt.ProductCode" class="touchspin text-center form-control" type="text" value="1" style="display: block;">
																</div>
															</fieldset>
														</div>

														<!-- Size Selection -->
														<div class="col-12 d-flex align-items-center mb-3">
															<div class="sizes-container">
																<h5> @sharedRes.CheckKey("SelectSize"):</h5>
																<div class="btn-group flex-wrap" role="group" aria-label="Size options">
																	@if (productt.Variants?.Count > 0)
																	{
																		// Create a list of already-rendered sizes to avoid duplicates
																		var renderedSizes = new HashSet<string>();

																		foreach (var variant in productt.Variants)
																		{
																			// Get size values from the variant specifications
																			var sizeSpecifications = variant.Specifications.Select(s => s.Value);

																			foreach (var size in sizeSpecifications)
																			{
																				// Avoid rendering the same size twice (for products with multiple variants of same size)
																				if (renderedSizes.Contains(size)) continue;
																				renderedSizes.Add(size);

																				var inputId = $"size-{productt.ProductCode}-{size}";
																				var hasStock = variant.StoreStockQuantity > 0;

																				<input type="radio"
																					   class="btn-check"
																					   name="sizeOptions-@productt.ProductCode"
																					   id="@inputId"
																					   value="@size"
																					   autocomplete="off"
																					   @(hasStock ? "" : "disabled") />

																				<label class="btn btn-outline-dark @(hasStock ? "" : "text-muted")"
																					   for="@inputId">
																					@size @(hasStock ? "" : "❌")
																				</label>
																			}
																		}
																	}
																</div>

															</div>
														</div>

														<!-- Add to Cart Button -->
														<div class="col-12">
															<a class="btn btn-sm add-to-cart-btn" data-product-id="@productt.ProductCode" style="background-color:#00B3B7"> @sharedRes.CheckKey("AddToCart")</a>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>


								</div>
							</div>
						</div>
					}
				}

			</div>
		</div>

		<!-- Container-fluid Ends-->
	</div>
@section Scripts {
		<!-- Plugins JS start-->
		<script src="/assets/js/rating/jquery.barrating.js"></script>
		<script src="/assets/js/rating/rating-script.js"></script>
		<script src="/assets/js/slick-slider/slick.min.js"></script>
		<script src="/assets/js/slick-slider/slick-theme.js"></script>

		<script src="/assets/js/range-slider/ion.rangeSlider.min.js"></script>
		<script src="/assets/js/range-slider/rangeslider-script.js"></script>
		<script src="/assets/js/touchspin/vendors.min.js"></script>
		<script src="/assets/js/touchspin/touchspin.js"></script>
		<script src="/assets/js/touchspin/input-groups.min.js"></script>
		<script src="/assets/js/owlcarousel/owl.carousel.js"></script>
		<script src="/assets/js/select2/select2.full.min.js"></script>
		<script src="/assets/js/select2/select2-custom.js"></script>
		<script src="/assets/js/tooltip-init.js"></script>
		<script src="/assets/js/product-tab.js"></script>
		<!-- Plugins JS Ends-->

		<script>
			document.addEventListener('DOMContentLoaded', function () {
				// Initialize cart count on page load
				const storedCount = sessionStorage.getItem('cartCount');
				if (storedCount) {
					const cartBadge = document.getElementById('cartCountBadge');
					if (cartBadge) {
						cartBadge.textContent = storedCount;
					}
				} else {
					refreshCartCountFromServer();
				}

				// Add event listener to all "Add to Cart" buttons
				const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');

				addToCartButtons.forEach(button => {
					button.addEventListener('click', function () {
						// Optional: delay if your backend needs time to update
						setTimeout(refreshCartCountFromServer, 300);
					});
				});
			});

			function refreshCartCountFromServer() {
				fetch('/@(currentLanguage)/Cart/GetCartItemCount', {
					method: 'GET',
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					}
				})
				.then(response => response.json()) // ✅ FIXED: parse as JSON
				.then(data => {
					updateCartCount(data.count);
				})
				.catch(error => {
					console.error('Error fetching cart count:', error);
				});
			}

			function updateCartCount(newCount) {
				sessionStorage.setItem('cartCount', newCount);

				const cartBadge = document.getElementById('cartCountBadge');
				if (cartBadge) {
					cartBadge.textContent = newCount;
				}

				document.dispatchEvent(new Event('cartCountUpdated'));
			}
					function toggleDetails(headerElement) {
				const container = headerElement.parentElement;
				container.classList.toggle("open");
			}
		</script>
}
